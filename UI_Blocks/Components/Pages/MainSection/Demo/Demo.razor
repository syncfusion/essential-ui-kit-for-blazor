@page "/demo"

@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.Collections.Generic
@using UI_Blocks.Data

@namespace UI_Blocks.Components.Pages.MainSection

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="main-container">
    <div class="header-container">
        <ul class="main-tab" role="tablist">
            <li class="tab-item preview @(IsPreviewMode ? "active" : "")" tab-text="Preview" role="tab" aria-selected="@(IsPreviewMode)" tabindex="0"
                @onclick="@(async () => await TogglePreviewCode("preview"))"
                @onkeydown="@(async (KeyboardEventArgs e) => await PreviewCodeHandleKeyDown(e, "preview"))">
                <img src="assets/images/sample-browser/preview.svg" alt="Preview Tab" />
                <div class="tab-text">Preview</div>
            </li>
            <li class="tab-item code @(IsPreviewMode ? "" : "active")" role="tab" aria-selected="@(!IsPreviewMode)" tabindex="0"
                @onclick="@(async () => await TogglePreviewCode("code"))"
                @onkeydown="@(async (KeyboardEventArgs e) => await PreviewCodeHandleKeyDown(e, "code"))">
                <img src="assets/images/sample-browser/code.svg" alt="Code Tab" />
                <div class="tab-text">Code</div>
            </li>
        </ul>

        @if (IsPreviewMode)
        {
            <div class="device-buttons">
                @foreach (ViewMode mode in Enum.GetValues<ViewMode>())
                {
                    <div class="device @(mode.ToString().ToLower()) @(CurrentView == mode ? "active" : "")"
                         @onclick="@(async () => await SwitchMode(mode))"
                         title="@mode" role="button" tabindex="0"
                         @onkeydown="@(async (KeyboardEventArgs e) => await SwitchHandleKeyDown(e, mode))">
                        <img src="assets/images/sample-browser/@(GetViewModeImage(mode)).svg" alt="@mode View" />
                    </div>
                }
            </div>

            <div class="custom-dropdown">
                <button class="dropdown-button" aria-haspopup="true" aria-expanded="@IsDropdownOpen" @onclick="ToggleDropdown" tabindex="0">
                    <div class="theme-icon">
                        <img src="assets/images/sample-browser/theme.svg" alt="Choose Theme" />
                    </div>
                    <div class="dropdown-text">Choose theme</div>
                    <div class="down-icon">
                        <img src="assets/images/sample-browser/chevron-down.svg" alt="Show/Hide Dropdown" />
                    </div>
                </button>
                <div class="dropdown-content" role="menu" style="@(IsDropdownOpen ? "display:block;" : "display:none;")">
                    @foreach (string theme in _availableThemes)
                    {
                        <div class="dropdown-item @(theme == CurrentTheme ? "selected" : "")" role="menuitem" tabindex="0"
                             @onclick="@(() => OnThemeChange(theme))">
                            <span class="select-icon">
                                @if (CurrentTheme.Contains(theme))
                                {
                                    <img src="assets/images/sample-browser/tick.svg" alt="Selected Theme" />
                                }
                            </span>
                            @GetThemeName(theme)
                        </div>
                    }
                </div>
            </div>

            <div class="lightDarkButton" @onclick="ToggleLightDarkModes" title="@((IsDarkMode ? "Light" : "Dark"))" role="button" tabindex="0"
                 @onkeydown="@((KeyboardEventArgs e) => ToggleLightDarkHandleKeyDown(e, IsPreviewMode ? "preview" : "code"))">
                <img src="assets/images/sample-browser/@(IsDarkMode ? "sun" : "moon").svg" alt="Toggle between Light and Dark Mode" />
            </div>
        }
    </div>
    @if (IsPreviewMode || ShowLoadingIndicator)
    {
        <div class="iframe-container">
            @if (ShowLoadingIndicator)
            {
                <div class="preview-overlay">
                    <img src="https://placehold.co/100x50?text=Loading..." alt="Loading Indicator" />
                </div>
            }
            @if (IsPreviewMode)
            {
                <object @ref="PreviewBlock" class="preview-container" data="@($"{NavigationManager.BaseUri}blocks/{BlockUrl}?CurrentTheme={CurrentTheme}")"
                        style="@(PreviewStyle + (!IsPreviewMode ? "display: none;" : ""))" title="Preview Content"
                        @onload="@(async () => await OnPreviewLoad())">
                </object>
            }
        </div>
    }
    else
    {
        <div class="preview-code-container" style="@(IsPreviewMode ? "display: none;" : "")">
            <div class="tab-container">
                <div class="tabs" role="tablist">
                    <div class="tab-buttons">
                        @foreach (string tab in _tabs)
                        {
                            <div class="tab @(tab == _selectedTab ? "active" : "") @tab-tab" style="@GetCodeStyle(tab)" role="tab" aria-controls="@tab"
                                 aria-selected="@(tab == _selectedTab)" tabindex="0"
                                 @onclick="@(() => ShowTab(tab))"
                                 @onkeydown="@((KeyboardEventArgs e) => OnTabKeyDown(e, tab))">
                                @tab.Replace("sharp", "#").ToUpper()
                            </div>
                        }
                    </div>
                    <button class="copy-button" onclick="window.copyToClipboard(event)" title="Copy to clipboard" role="button" tabindex="0">
                        <img src="assets/images/sample-browser/copy.svg" alt="Copy Code to Clipboard" />
                    </button>
                </div>

                @foreach (string tab in _tabs)
                {
                    <div class="tab-content @(tab == _selectedTab ? "active" : "")" role="tabpanel">
                        <pre><code class="language-@tab">@GetTabContent(tab)</code></pre>
                        <textarea style="display:none">@GetTabContent(_selectedTab)</textarea>
                    </div>
                }
            </div>
        </div>
    }
</div>

<div class="tooltip" role="tooltip">
    <div class="tooltip-arrow"></div>
    Code copied!
</div>